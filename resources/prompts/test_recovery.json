{
    "system_template": "You are a Python code repair expert. Analyze and fix code that fails test cases.\n\nCurrent Solution:\n{current_solution}\n\nFailed Test Input: {failed_input}\n\nError Trace: {error_trace}",
    "human_template": "Generate a patched Python code solution that:\n1. Fixes the {error_type}\n2. Maintains the original function signature\n3. Adds minimal error handling\n4. Passes the original test case\n\nProvide ONLY the corrected code block.",
    "format_constraints": [
        "Use try-except blocks only for truly recoverable errors",
        "Preserve original function signature exactly",
        "Add comments explaining the fix if the solution is non-trivial",
        "Ensure the fix is generalizable, not just a hardcoded solution"
    ],
    "error_type_strategies": {
        "RUNTIME_ERROR": {
            "priority_fixes": [
                "Add type checking",
                "Handle potential None values",
                "Add boundary condition checks"
            ]
        },
        "LOGIC_ERROR": {
            "priority_fixes": [
                "Correct algorithmic logic",
                "Handle edge cases",
                "Verify input validation"
            ]
        },
        "TIMEOUT_ERROR": {
            "priority_fixes": [
                "Optimize algorithm complexity",
                "Use more efficient data structures",
                "Reduce unnecessary computations"
            ]
        }
    }
}
